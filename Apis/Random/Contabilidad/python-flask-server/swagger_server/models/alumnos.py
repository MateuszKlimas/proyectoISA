# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Alumnos(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, photo_urls: List[str]=None):
        """
        Alumnos - a model defined in Swagger

        :param id: The id of this Alumnos.
        :type id: int
        :param name: The name of this Alumnos.
        :type name: str
        :param photo_urls: The photo_urls of this Alumnos.
        :type photo_urls: List[str]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'photo_urls': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'photo_urls': 'photoUrls'
        }

        self._id = id
        self._name = name
        self._photo_urls = photo_urls

    @classmethod
    def from_dict(cls, dikt) -> 'Alumnos':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Alumnos of this Alumnos.
        :rtype: Alumnos
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """
        Gets the id of this Alumnos.

        :return: The id of this Alumnos.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this Alumnos.

        :param id: The id of this Alumnos.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this Alumnos.

        :return: The name of this Alumnos.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Alumnos.

        :param name: The name of this Alumnos.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def photo_urls(self) -> List[str]:
        """
        Gets the photo_urls of this Alumnos.

        :return: The photo_urls of this Alumnos.
        :rtype: List[str]
        """
        return self._photo_urls

    @photo_urls.setter
    def photo_urls(self, photo_urls: List[str]):
        """
        Sets the photo_urls of this Alumnos.

        :param photo_urls: The photo_urls of this Alumnos.
        :type photo_urls: List[str]
        """
        if photo_urls is None:
            raise ValueError("Invalid value for `photo_urls`, must not be `None`")

        self._photo_urls = photo_urls

